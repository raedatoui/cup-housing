package com.cup.output{	import com.cup.model.SubBoroIncomes;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.utils.ByteArray;	import flash.utils.Dictionary;		import org.alivepdf.colors.RGBColor;	import org.alivepdf.display.Display;	import org.alivepdf.encoding.PNGEncoder;	import org.alivepdf.layout.Orientation;	import org.alivepdf.layout.Size;	import org.alivepdf.layout.Unit;	import org.alivepdf.pdf.PDF;	import org.alivepdf.saving.Download;	import org.alivepdf.saving.Method;		public class PDFComp extends Sprite	{		public static const PRINT:String = 'print';				//*** Map position on PDF		//protected var defaultFontName:String = 'Arial';		protected var defaultFontName:String = 'Courier';		protected var defaultBoldName:String = 'Arial';		//protected var defaultFontName:String = TextMaker.regularFont.fontName; // change this to 'Helvetica' or 'Arial' when you're working		protected var defaultVariableColor:uint = 0x000000;		protected var defaultBold:Boolean = false;		protected var defaultVariableBold:Boolean = true;		public var margin:int = 36;		public var stripHeight:int = 50;		public var titleHeight:int = 15;		public var chartMargin:int = 12;				// inset from left		public var barMargin:int = 3;		public var textDim:Point = new Point(365,223);		public var textOffset:Point = new Point(4,-4);		public var textMargin:int = 12;		public var textBoxDim:Point = new Point(368,176);		public var mapFitDimensions:Point = new Point(256,256);		public var mapFitLocation:Point = new Point(433,168);		//public var mapFitLocation:Point = new Point(139,139);		public var pageDimensions:Point = new Point(792,612);				public var estimatedRent:int = 1200;				public var squareWidth:int = 8;		public var squareMargin:Number = .9;		public var squareValue:Number = 0;			public var scale:Number = 1;		public var offset:Point = new Point;				protected var chartStrip1:BitmapData;		protected var chartStrip2:BitmapData;		public var chartColors:Array = [0xF49B18,0xED1C24,0x5E0F0C,0x2B338C,0x0C8040,0xD54799];		protected var incomeDescriptions:Array = ["Extremely Low Income","Very Low Income","Low Income","Moderate Income","Middle Income","High Income"];		protected var incomeRanges:Array = ["($23K OR LESS)","($24K TO $38K)","($38K TO $61K)","($61K TO $91K)","($91K TO $192K)","($192K OR MORE)"];				protected var barLocationsAsPercents:Array = [0, 0.11, 0.183, 0.293, 0.434, 0.914];		public var stripAdded:Boolean = false;		// this is what i'm using to notify my flash piece when stuff happens		public var info:EventDispatcher;		public var outputPDF:PDF;				protected var workingBorough:String;				protected var svgLoader:URLLoader;		protected var pngLoader:Loader;				protected var outlineDict:Dictionary = new Dictionary();		protected var boroughList:Array = new Array();		protected var outlineList:Array = new Array();		protected var islandArray:Array = new Array();				protected var selectedBoroughs:Array = new Array;		public var incomeDataArray:Array = new Array;				public var gLeft:Number;		public var gRight:Number;		public var gTop:Number;		public var gBottom:Number;				protected var familyCOunt:int = 0;				protected var tgReg:Font;		protected var tgBold:Font;				protected var multiPage:Boolean;		public function PDFComp(svgAddress:String,strip1:BitmapData,strip2:BitmapData,incomes:Array,boroughs:Array,rent:int,famSquareVal:int,regularF:Font,boldF:Font,multipage:Boolean = true):void		{					squareValue = famSquareVal;						tgReg = regularF;			tgBold = boldF;			defaultFontName = tgReg.fontName;			defaultBoldName = tgBold.fontName;						info = new EventDispatcher();						chartStrip1 = strip1;			chartStrip2 = strip2;						selectedBoroughs = boroughs;			incomeDataArray = incomes;			estimatedRent = rent;						var svgString:URLRequest = new URLRequest(svgAddress);			svgLoader = new URLLoader(svgString);						svgLoader.addEventListener(Event.COMPLETE,readBoroughs);						multiPage = multipage;		}				public function readBoroughs(e:Event):void		{			var rawXML:XMLList = XMLList(svgLoader.data);			//rawXML.ignoreWhitespace = true;						for each (var item:XML in rawXML.elements())			{				recursiveParse(item);			}						//trace(outlineList);			createPDF();					}				private function recursiveParse(xml:XML):void		{			//trace("NAME: "+xml.name());			var tempID:String = xml.@id.toString();			if(tempID.substr(0,17) == "sub_x5F_boro_x5F_" || tempID == "background")			{				workingBorough = tempID.substring(tempID.length-3,tempID.length);				//trace("========================================Working Borough: "+workingBorough+"=========================");				outlineDict[workingBorough] = new BoroughData(workingBorough);				//trace(workingBorough);				if(workingBorough != "und")				{					outlineList.push(workingBorough);				}			}						var tempPoints:String = xml.@points.toString();			if(tempPoints != "")			{				var tempBoroughData = outlineDict[workingBorough];				tempBoroughData.addPoints(tempPoints);				outlineDict[workingBorough] = tempBoroughData;				//trace("workingBorough:",workingBorough);			}						for each (var att:XML in xml.attributes()) {								var attName:String = att.toString();									if(attName.substr(0,4) == "#sub"){					attName = attName.substr(18,3);										tempBoroughData = outlineDict[attName];					tempBoroughData.setTranslate(xml.@transform);										//trace(outlineDict[attName].translate);									}				//trace("Attribute: "+att.name()+" = "+att);			}			//if(xml.@id.toString() != ""){trace("id found:",xml.@id);}			if (xml.children()!=xml) {				for each (var item:XML in xml.children()) {					recursiveParse(item);				}			}		}						public function createPDF():void		{						outputPDF = new PDF( Orientation.LANDSCAPE, Unit.POINT, Size.LETTER );			outputPDF.setDisplayMode ( Display.REAL );//zoom 100%			outputPDF.setAutoPageBreak(false,0);			   			   			if(multiPage)			{				trace(incomeDataArray, incomeDataArray.length);				for each(var iData:Object in incomeDataArray)				{					//newPage(incomeDataArray);					trace(iData is SubBoroIncomes, iData);					newPage([iData as SubBoroIncomes]);				}						} else {				newPage(incomeDataArray);			}									savePDF();		}					public function newPage(incomes:Array,highlightColor:uint = 0x444444 , generalColor:uint = 0xaaaaaa, backColor:uint = 0xdddddd,lineWeight:Number = 0,lineColor:uint = 0xcccccc):void		{			/*selectedBoroughs = [];			for each(var bData:SubBoroIncomes in incomes)			{				selectedBoroughs.push(bData.id);			}*/											outputPDF.addPage();// we add a page			outputPDF.lineStyle ( new RGBColor ( 0x000000 ) );// set the line style color					//apparently necessary, but no idea why			outputPDF.drawCircle(-10,-10,0);						/***********************			Calculate scale and boroughs to draw			***********************/						var mapUL:Point = new Point(160,160);			var mapDimensions:Point = new Point(92,92);			//Get global max/mins			gLeft = 1000;			gRight = -1000;			gTop = 1000;			gBottom = -1000;						for each(var inc:String in selectedBoroughs)			{				//var idInt:int = int(inc.valueOf);				var tempBorough:BoroughData = outlineDict[inc];								gLeft = Math.min(gLeft,tempBorough.left);				gRight = Math.max(gRight,tempBorough.right);				gTop = Math.min(gTop,tempBorough.top);				gBottom = Math.max(gBottom,tempBorough.bottom);			}									trace("globals:",gRight,gLeft,gTop,gBottom);			var selectedWidth:Number = gRight - gLeft;			var selectedHeight:Number = gBottom - gTop;						var vScale:Number = (mapFitDimensions.y)/selectedHeight;			var hScale:Number = (mapFitDimensions.x)/selectedWidth;						scale = Math.min(vScale,hScale);			var scaleMultiplier:Number = ((scale-3.72)/-3.088)/2.5 + 1;			scaleMultiplier *= (squareValue != 100)?1.25:1;			scale *= scaleMultiplier;						offset.x = mapFitLocation.x - gLeft*scale + ((mapFitDimensions.x) - selectedWidth*scale)/2;			offset.y = mapFitLocation.y - gTop*scale + ((mapFitDimensions.y) - selectedHeight*scale)/2;						/*gLeft -= mapMargins/scale;			gRight += mapMargins/scale;			gTop -= mapMargins/scale;			gBottom += mapMargins/scale;*/						gLeft = (mapFitLocation.x - offset.x)/scale;			gRight = (mapFitLocation.x + mapFitDimensions.x - offset.x)/scale;			gTop = (mapFitLocation.y - offset.y)/scale;			gBottom = (mapFitLocation.y + mapFitDimensions.y - offset.y)/scale;						trace("boroughs",selectedBoroughs,"offset:",offset,"scale:",scale);						/***********************			DRAW THE BACKGROUND			***********************/			//Ocean			outputPDF.beginFill(new RGBColor(0xeeeeee));			outputPDF.drawRect(new Rectangle(0,0,pageDimensions.x,pageDimensions.y));			outputPDF.endFill();			boroughColor = backColor;			lineWeight = 0;						var tempBorough:BoroughData = outlineDict["und"];			//trace(tempBorough.id,tempBorough.translate);			for each (var pointArray:Array in tempBorough.pointArrays)			{				drawPolyOutline(pointArray,tempBorough.translate,boroughColor,lineWeight,0xffffff);			}						/***********************			DRAW THE BOROUGHS			***********************/			lineWeight = 1.5;						for each (var id:String in outlineList)			{				var boroughColor:uint = generalColor;				var boroughLineColor:uint = 0xeeeeee;//lineColor;								for each (var borough:int in selectedBoroughs)				{					//trace("bor: ",borough,"id: ",id);					if(borough.toString() == id)					{						//trace("hit");						boroughColor = highlightColor;						//boroughLineColor = highlightColor;					}					//trace("color: ",boroughColor.toString(16));				}												//trace(id);				tempBorough = outlineDict[id];				//trace(tempBorough.id,tempBorough.translate);				//trace("bounds");				//trace(gLeft,gRight,gTop,gBottom);				//trace(tempBorough.left,tempBorough.right,tempBorough.top,tempBorough.bottom);				//if(tempBorough.left < gRight && tempBorough.right > gLeft && tempBorough.top < gBottom && tempBorough.bottom > gTop)				//{									for each (pointArray in tempBorough.pointArrays)					{						drawPolyOutline(pointArray,tempBorough.translate,boroughColor,lineWeight,boroughLineColor);					}				//}			}						/***********************			Add Chart			***********************/			var families:int = addChart(incomes);			/***********************			DRAW THE MASK			***********************/			var mapMargins:int = 36;						outputPDF.lineStyle(new RGBColor(0xffffff));			outputPDF.beginFill(new RGBColor(0xffffff));			outputPDF.drawRect(new Rectangle(0,0,mapMargins,612));			outputPDF.drawRect(new Rectangle(0,0,792,mapMargins+titleHeight));			outputPDF.drawRect(new Rectangle(792-mapMargins,0,mapMargins,612));			outputPDF.drawRect(new Rectangle(0,612-mapMargins,792,mapMargins));			outputPDF.endFill();															/***********************			Add Text			***********************/						//Set variables			var textYear:String = "2006";			var boroughName:String = incomes[0].name;			var BOROUGHNAME:String = boroughName.toLocaleUpperCase();			boroughName = spaceToQuestion(boroughName);			var MFI:int = incomes[0].medianIncome;			//trace("MFI:",MFI);			var MFIString:String = commaNumber(MFI);			var percentMFI:int = MFI/768;						var familiesString:String = commaNumber(families);						var calculatedIncome:int = estimatedRent*12/.3;			var calculatedIncomeString:String = commaNumber(calculatedIncome);			//trace(calculatedIncomeString);												//Create Strings			var finalText:String = "";			var finalTextVarStarts:Array = [];			var finalTextVarEnds:Array = [];			var finalTextQuestions:Array = [];						var pageTitle:String = (estimatedRent >0)?"INCOME AND RENT IN ":"INCOME IN ";			var pageCredits:String = "CENTER FOR URBAN PEDAGOGY";			var webAddress:String = "WWW.ENVISIONINGDEVELOPMENT.NET";			//var textArray:Array = ["\nIn ",textYear,", ",familiesString," families lived in "+boroughName+".\nThe Median Family Income in "+boroughName+" was ","$"+MFIString+".","\nThat's ",percentMFI+"%"," of the NYC metro area MFI, which is $76,800."];			//var textArray2:Array = ["\n","The estimated rent for a 1-bedroom apartment in "+boroughName+" is ","$"+estimatedRent+".","  The government defines affordable housing as housing that costs less than 30% of the occupying family's income.  You'd have to make ","$"+calculatedIncomeString," each year to afford a vacant 1-bedroom apartment in "+boroughName+"."];						var textArray:Array = [/*"\n",boroughName,*/"","2006","\n","$"+MFIString," - "+boroughName+" MFI (",percentMFI+"%"," of NYC METRO AREA!MFI)\n"];			var textArray2:Array = ["$"+estimatedRent," - your estimated rent for a 2-bedroom apartment in " + boroughName +"\n",									"$"+calculatedIncomeString," - minimum annual income to meet government standards* for affordable housing\n"];			var textArray3 = ["\n1 square equals "+squareValue+" families."];						if (estimatedRent > 0){				textArray = textArray.concat(textArray2);				textArray3[0] += "\n*The government defines affordable housing as costing less than 30% of the occupying family's income.";			}			textArray = textArray.concat(textArray3);						var len:int = textArray.length;			for(var i:int = 0; i < len; i++)			{				finalText += textArray[i];												if(i % 2 == 0)				{					finalTextVarStarts.push(finalText.length);				} else {					finalTextVarEnds.push(finalText.length);				}				   			}						len = finalText.length;			for(i=0; i<len; i++)			{				if(finalText.charAt(i) == '!')					finalTextQuestions.push(i);			}									var plainTextFormat:TextFormat = new TextFormat(defaultFontName, 48, 0x000000,null,null,null,null,null,null,100,null,-100);			var creditTextFormat:TextFormat = new TextFormat(defaultFontName, 36, 0x000000);			var varTextFormat:TextFormat = new TextFormat(defaultBoldName, 48, defaultVariableColor);			var spaceTextFormat:TextFormat = new TextFormat(defaultBoldName, 48, 0xffffff);			var titleTextFormat:TextFormat = new TextFormat(defaultFontName, 96, 0x000000);			var titleVarTextFormat:TextFormat = new TextFormat(defaultBoldName, 96, defaultVariableColor,null,null,null,null,null,null,null,null,10);						var textBlock:TextField = new TextField;									textBlock.width = textBoxDim.x*4 - textMargin*4;			textBlock.height = textBoxDim.y*4;			textBlock.wordWrap = true;			textBlock.multiline = true;			textBlock.embedFonts = true;						textBlock.text = finalText;			textBlock.setTextFormat(plainTextFormat);						len = finalTextVarEnds.length;			for(i = 0; i < len; i++)			{				textBlock.setTextFormat(varTextFormat,finalTextVarStarts[i],finalTextVarEnds[i]);			}						textBlock.setTextFormat(creditTextFormat,finalTextVarStarts[len-1],finalTextVarEnds[len-1]);						len = finalTextQuestions.length;			for(i = 0; i < len; i++)			{				textBlock.setTextFormat(spaceTextFormat,finalTextQuestions[i],finalTextQuestions[i]+1);			}									textBoxDim.y = (textBlock.textHeight + 10)/4;			var tempData:BitmapData = new BitmapData(textBoxDim.x*4,textBoxDim.y*4+25,false,0xffffff);			tempData.draw(textBlock,new Matrix(1,0,0,1,textOffset.x*4,textOffset.y*4+25));						var byteData:ByteArray = new ByteArray;			byteData = PNGEncoder.encode(tempData,1);			//byteData = PNGEnc.encode(tempData,1);			byteData.position = 0;									//var textBoxOffset:Point = new Point(pageDimensions.x - margin - chartMargin - textBoxDim.x,margin + titleHeight +chartMargin);			var textBoxOffset:Point = new Point(margin + chartMargin,margin + titleHeight +chartMargin);			outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,textBoxDim.x,textBoxDim.y);									//Income and Rent title			/*textBlock.width = 2000;						textBlock.text = pageTitle;			textBlock.setTextFormat(plainTextFormat);			textBlock.embedFonts = true;						//tempData = new BitmapData(textBlock.textWidth,textBlock.textHeight,false,0xffffff);			tempData = new BitmapData(2000,100,false,0xffffff);			tempData.draw(textBlock);						byteData = new ByteArray;			byteData = PNGEncoder.encode(tempData,1);			byteData.position = 0;						textBoxOffset = new Point(margin,margin-4);			outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4);*/						//Borough Name						textBlock.width = 2400;						textBlock.text = "\n"+pageTitle + BOROUGHNAME;			textBlock.setTextFormat(titleVarTextFormat);						tempData = new BitmapData(2400,75,false,0xffffff);			tempData.draw(textBlock,new Matrix(1,0,0,1,-12,-150));						byteData = new ByteArray;			byteData = PNGEncoder.encode(tempData,1);			byteData.position = 0;						textBoxOffset = new Point(margin,margin-5);			outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4);						//Credit						textBlock.width = 2000;						textBlock.text = pageCredits;			textBlock.setTextFormat(creditTextFormat);			textBlock.embedFonts = true;						tempData = new BitmapData(600,36,false,0xffffff);			tempData.draw(textBlock,new Matrix(1,0,0,1,0,-8));						byteData = new ByteArray;			byteData = PNGEncoder.encode(tempData,1);			byteData.position = 0;						textBoxOffset = new Point(652,margin-5);			outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4);						//web address						textBlock.width = 2000;						textBlock.text = webAddress;			textBlock.setTextFormat(creditTextFormat);			textBlock.embedFonts = true;						tempData = new BitmapData(600,36,false,0xffffff);			tempData.draw(textBlock,new Matrix(1,0,0,1,0,-8));						byteData = new ByteArray;			byteData = PNGEncoder.encode(tempData,1);			byteData.position = 0;						textBoxOffset = new Point(627,margin+5);			outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4);						/*trace("height: ",textBlock.height);			textBlock.height = 900000;			textBlock.background = true;			textBlock.backgroundColor = 0x55ffff;			textBlock.multiline = false;			textBlock.text = BOROUGHNAME;			textBlock.setTextFormat(titleVarTextFormat);						tempData = new BitmapData(textBlock.textWidth,900,false,0xffff55);									byteData = new ByteArray;			byteData = PNGEncoder.encode(tempData,1);			byteData.position = 0;									textBoxOffset = new Point(margin-1.5,margin+10);			outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4);*/											}			public function addChart(incomes:Array):int		{						var reg6Format:TextFormat = new TextFormat(defaultFontName, 24, 0xffffff, false,null,null,null,null,TextFormatAlign.CENTER);			var bold7Format:TextFormat = new TextFormat(defaultBoldName, 28, 0xffffff, false,null,null,null,null,TextFormatAlign.CENTER);			var bold8Format:TextFormat = new TextFormat(defaultBoldName, 32, 0xffffff, false,null,null,null,null,TextFormatAlign.CENTER);						var textBlock:TextField = new TextField;			textBlock.embedFonts = true;						textBlock.width = 88;			textBlock.height = 32;						var tempData:BitmapData;			var byteData:ByteArray;			var textBoxOffset:Point ;												/***********************			DRAW THE MFI BAR			***********************/															//var MFIBar:Sprite = new Sprite;						var breakPoints:Array = [0.000,23.050,38.400,61.450,91.150,192.000,220.000];						var stripTop:int = pageDimensions.y - stripHeight - margin;			var stripWidth:int = (pageDimensions.x - margin*2)/2;						var stripBitmap:Bitmap = new Bitmap(chartStrip1);						//			// YOYO: bitmap or display object, then x position in pixels, y position in pixels, width in pixels, height in pixels			//			outputPDF.addImage(stripBitmap,margin,stripTop,stripWidth,stripHeight);						stripBitmap = new Bitmap(chartStrip2);			outputPDF.addImage(stripBitmap,margin+stripWidth,stripTop,stripWidth,stripHeight);						//var MFIBar:Sprite = new Sprite;															/* for(var i:int = 0; i<6; i++)			{				var leftX:Number = margin + Math.min(10000*i,chartMargin + 3.16 * breakPoints[i]);				var rightX:Number = margin + Math.max(stripWidth/5*i,chartMargin + 3.16 * breakPoints[i+1]);				//trace("rightX",i,stripWidth/5*i,rightX);				var barColor:RGBColor = new RGBColor(chartColors[i]);					outputPDF.lineStyle(barColor,0);				outputPDF.beginFill(barColor);				outputPDF.drawRect(new Rectangle(leftX,stripTop,rightX-leftX,stripHeight));				outputPDF.endFill();							MFIBar.graphics.beginFill(chartColors[i]);				MFIBar.graphics.drawRect(leftX*4,stripTop*4,(rightX-leftX)*4,stripHeight*4);				MFIBar.graphics.endFill();			} */						//Draw horizontal line			/* var numberLineWidth:int = pageDimensions.x - margin*2 - chartMargin*2;						outputPDF.lineStyle(new RGBColor(0xffffff),.25);			outputPDF.moveTo(margin+chartMargin,stripTop + stripHeight/2);			outputPDF.lineTo(numberLineWidth+margin+chartMargin,stripTop + stripHeight/2);						outputPDF.drawCircle(-10,257,0);  */									// we add some text			//myPDF.addMultiCell ( 80, 8, "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ut posuere, felis volutpat hendrerit ullamcorper, purus sem vehicula augue, ac volutpat sapien dui non metus." );						// *************************add the MFI number line			/* var twentyK:Number = numberLineWidth/11;						var MFITickHeight:int = 10;			var MFITickTop:int = stripTop + 25;			var MFITickBottom:int = MFITickTop + MFITickHeight;			for(var i:int = 0; i<12; i++)			{				var lineX:Number = margin + chartMargin + i*twentyK;				//trace("numberLine:",numberLineWidth,"linex: ",lineX);												outputPDF.moveTo(lineX,MFITickTop);				outputPDF.lineTo(lineX,MFITickBottom);				outputPDF.drawCircle(-10,257,0);								var yearly:int = 20*i;				var monthly:int = 500*i;				var yearlyString:String = yearly.toString()+"K";				var monthlyString:String = "$"+monthly.toString();																textBlock.text = yearlyString;				textBlock.setTextFormat(reg6Format);				textBlock.width = 88;								tempData = new BitmapData(88,32,false,0x000000);				textBoxOffset = new Point(lineX - 11,stripTop + stripHeight - 12);				tempData.draw(MFIBar,new Matrix(1,0,0,1,textBoxOffset.x*-4,textBoxOffset.y*-4));				tempData.draw(textBlock);								byteData = new ByteArray;				byteData = PNGEncoder.encode(tempData,1);				byteData.position = 0;												outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4);																																			}  */									//************************** add the breakpoints and bars						var squareColor:uint = 0xffffff;									 			var familyCount:int = 0;						for(var i:int = 0; i<6; i++)			{				//var leftX:Number = margin + chartMargin + 3.16 * breakPoints[i];				var leftX:Number = margin + barMargin + barLocationsAsPercents[i]*stripWidth*2;				var rightX:Number = margin + chartMargin + 3.16 * breakPoints[i+1];				var families:int = 0;							var familySquares:int = 0;				//trace("fdsfsd: ",incomeDataArray.length);								//for each(var inc:SubBoroIncomes in incomes)				//{					//families += inc.incomeLevels[i];				//}								families = incomes[0].incomeLevels[i];				familyCount += families;								/*for(var j:int = 0; j < incomeDataArray.length; j++)				{					familySquares += i*4000;										//trace("testing: ",j,i,incomeDataArray[j].incomeLevels[1]);					//familySquares += incomeDataArray[j].incomeLevels[i];									}*/								familySquares = Math.ceil(families/squareValue);				//trace("squares: ",familySquares);								var squaresWide:int = 5;//(rightX - leftX)/squareWidth;				var squaresHigh:int = Math.ceil(familySquares/squaresWide);				var barHeight:Number = squaresHigh * squareWidth;				var barWidth:Number = rightX - leftX;								var squareOffset:int = (barWidth - squaresWide*squareWidth)/2;								//Solid fill bar				/*outputPDF.lineStyle(new RGBColor(chartColors[i]),0);				outputPDF.beginFill(new RGBColor(chartColors[i]));				outputPDF.drawRect(new Rectangle(leftX,stripTop,barWidth,-barHeight));				outputPDF.endFill();*/																/***********************				 * Add all bar tags				 **********************/				var barCenter:Number = leftX + barWidth/2;								//Families				var familiesString:String = commaNumber(families) + " families";							textBlock.text = familiesString;				textBlock.setTextFormat(reg6Format);				trace(squaresWide,squareWidth,squareMargin);				textBlock.width = 4*(squareWidth*squaresWide - squareMargin*2);				//trace("width: ",textBlock.width);								tempData = new BitmapData(textBlock.width,32,false,0x666666);				//textBoxOffset = new Point(barCenter - tempData.width/8,stripTop - barHeight - 15);				textBoxOffset = new Point(leftX+squareMargin,stripTop - barHeight - 17);				tempData.draw(textBlock,new Matrix(1,0,0,1,0,1));								byteData = new ByteArray;				byteData = PNGEncoder.encode(tempData,1);				byteData.position = 0;												outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4);				//text Income				/* textBlock.text = incomeDescriptions[i];				textBlock.setTextFormat(reg6Format);				textBlock.width = textBlock.textWidth+10;								tempData = new BitmapData(textBlock.width,32,false,0x000000);				textBoxOffset = new Point(barCenter - tempData.width/8,stripTop + 3);				tempData.draw(MFIBar,new Matrix(1,0,0,1,textBoxOffset.x*-4,textBoxOffset.y*-4));				tempData.draw(textBlock);								byteData = new ByteArray;				byteData = PNGEncoder.encode(tempData,1);				byteData.position = 0;								textBoxOffset = new Point(barCenter - tempData.width/8,stripTop + 3);				outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4);								//figure Income						textBlock.text = incomeRanges[i];				textBlock.setTextFormat(bold7Format);				textBlock.width = 240;								tempData = new BitmapData(textBlock.width,32,false,0x000000);				textBoxOffset = new Point(barCenter - tempData.width/8,stripTop + 12);				tempData.draw(MFIBar,new Matrix(1,0,0,1,textBoxOffset.x*-4,textBoxOffset.y*-4));				tempData.draw(textBlock);								byteData = new ByteArray;				byteData = PNGEncoder.encode(tempData,1);				byteData.position = 0;								outputPDF.addImageStream(byteData,textBoxOffset.x,textBoxOffset.y,tempData.width/4,tempData.height/4); */								//familiesString = familiesString.substr(0,familiesString.length - 3)+","+familiesString.substr(familiesString.length-3,3);								/*outputPDF.setFont ( FontFamily.HELVETICA, Style.NORMAL );				outputPDF.setFontSize (6);				outputPDF.textStyle(new RGBColor(0x000000));				outputPDF.addText(familiesString+" families",leftX+5,barTop-barHeight-5);				outputPDF.setXY(leftX+3,barTop+30);				outputPDF.addMultiCell(barWidth-6,8,incomeDescriptions[i],"0","L");				outputPDF.setX(leftX+3);				outputPDF.addMultiCell(barWidth-6,8,incomeRanges[i],"0","L");*/								//*************draw boxes				for(var n:int = 0; n<squaresHigh; n++)				{					//trace(familySquares, squaresWide);					var squaresInLine:int = Math.min(familySquares,squaresWide);										for(var o:int = 0; o<squaresInLine; o++)					{						outputPDF.lineStyle(new RGBColor(chartColors[i]),0.001);						outputPDF.beginFill(new RGBColor(chartColors[i]));						outputPDF.drawRect(new Rectangle(leftX + squareWidth*o + squareMargin,stripTop - squareWidth*n-squareMargin*2,squareWidth-squareMargin*2,-squareWidth+squareMargin*2));						outputPDF.endFill();					}										familySquares -= squaresInLine;				}							}						return(familyCount);		}						protected var boroughPrefixes:Array = ['', 'bronx', 'brooklyn', 'manhattan', 'queens', 'statenisland'];		public function savePDF():void		{			//find borough			var boroughNumber:String = selectedBoroughs[0];			var pdfName:String = "";						var boroPrefixIndex:int = parseInt(boroughNumber.substr(0, 1));			trace('prefix', boroPrefixIndex, boroughPrefixes[boroPrefixIndex]);			pdfName = (selectedBoroughs.length == 1) ? boroughPrefixes[boroPrefixIndex] + "_" + boroughNumber.substr(1,2) : boroughPrefixes[boroPrefixIndex];						trace("saving test");			outputPDF.save(Method.REMOTE, "http://envisioningdevelopment.net/flash/resources/create.php", Download.INLINE, pdfName + ".pdf" );			//http://envisioningdevelopment.net/html/flash/resources/create.php									//outputPDF.save(Method.REMOTE, "Z:/nyc_cup_housing/flash/src/create.php", Download.ATTACHMENT, "newyork.pdf" );						// tell the flash what the rock is cooking			info.dispatchEvent(new Event(Event.COMPLETE));		}				private function commaNumber(plainNumber:int):String		{			var numberString:String = plainNumber.toString();						if(plainNumber <1000)			{							} else if(plainNumber <1000000){								numberString = numberString.substr(0,numberString.length - 3)+","+numberString.substr(numberString.length-3,3);			} else {				numberString = numberString.substr(0,numberString.length - 6)+","+numberString.substr(numberString.length-6,3)+","+numberString.substr(numberString.length-3,3);			}						return numberString;										}				private function drawPolyOutline(points:Array,translation:Point,fillColor:uint = 0xffffff,lineWeight:Number = 0,lineColor:uint = 0x000000)		{			var tempPolyPoints:Array = [];						for each (var p:Point in points)			{				if(p.x)				{					//tempPolyPoints.push((p.x + translation.x)*scale + offset.x);					//tempPolyPoints.push((p.y + translation.y)*scale + offset.y);					tempPolyPoints.push((p.x)*scale + offset.x);					tempPolyPoints.push((p.y)*scale + offset.y);				}			}						outputPDF.lineStyle ( new RGBColor ( lineColor ), lineWeight );// set the line style color			outputPDF.beginFill(new RGBColor ( fillColor ));			outputPDF.drawPolygone(tempPolyPoints);			outputPDF.endFill();		}						private function spaceToQuestion(s:String):String		{			var spacePattern:RegExp = / /g;  			var q:String = s.replace(spacePattern,'!');						return(q);		}			}}